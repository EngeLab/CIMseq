#'@include All-classes.R
NULL

#' CIMseqConnections
#'
#' Subtitle
#'
#' Description
#'
#' @name CIMseqConnections
#' @rdname CIMseqConnections
#' @param singlets CIMseqSinglets; A CIMseqSinglets object.
#' @param multiplets CIMseqMultiplets; A CIMseqMultiplets object.
#' @param maxiter integer; The maximum optimization iterations.
#' @param swarmsize integer; The number of swarm particals.
#' @param nSyntheticMultiplets Numeric; Value indicating the number of synthetic
#'  multiplets to generate during deconvolution.
#' @param seed integer; Seed to set before running.
#' @param norm logical; Indicates if the sum of fractions should equal 1.
#' @param report logical; Indicates if additional reporting from the
#'   optimization should be included.
#' @param reportRate integer; If report is TRUE, the iteration interval for 
#' which a report should be generated.
#' @param vectorize logical, Argument to \link[pso]{psoptim}.
#' @param permute logical; indicates if genes should be permuted before
#'  deconvolution. For use with permutation testing.
#'  @param singletIdx list; Singlet indexes to be used to choose singlets and
#'  synthesize synthetic multiplets. Facilitates using the same synthetic set 
#'  e.g. with repeated runs or permutation. 
#' @param fractions matrix; The deconvolution results.
#' @param costs numeric; The costs after optimization.
#' @param convergence character; The convergence output from \link[pso]{psoptim}.
#' One value per multiplet.
#' @param stats tbl_df; The stats output from \link[pso]{psoptim}
#' @param arguments list; Arguments passed to the CIMseqConnections function.
#' @param singletIdx list; Indexes indicating singlets that were subset to 
#' synthesize synthetic multiplets. Facilitates recreation of the synthetic 
#' multiplets downstream.
#' @param swarmPos matrix; Final swarm positions from \link[pso]{psoptim}
#' @param x CIMseqConnections; A CIMseqConnections object.
#' @param object CIMseqConnections; A CIMseqConnections to show.
#' @param n character; Data to extract from CIMseqConnections object.
#' @param cacheScores logical; Use score caching optimization (experimental) Requires R package hashmap to be installed
#' @param .Object Internal object.
#' @param ... additional arguments to pass on.
#' @return CIMseqConnections output.
#' @author Jason T. Serviss
#' @examples
#'
#' #use demo data
#'
NULL

#' @rdname CIMseqConnections
#' @export

setGeneric("CIMseqConnections", function(
  singlets, multiplets, ...
){
  standardGeneric("CIMseqConnections")
})

#' @importFrom future.apply future_lapply
#' @importFrom matrixStats rowSums2 rowMeans2
#' @importFrom dplyr "%>%" bind_rows mutate
#' @importFrom purrr map map_dbl
#' @importFrom tibble tibble as_tibble add_column
#' @importFrom tidyr unnest
#' @rdname CIMseqConnections
#' @export

### importFrom pso psoptim

setMethod("CIMseqConnections", c("CIMseqSinglets", "CIMseqMultiplets"), function(
  singlets, multiplets, swarm, alpha = 0.01, weightCut = 10, expectedWeightCut = 0, maxCellsPerMultiplet=4, depleted=F, multiplet.factor=NA
){
    
  #put a check here to make sure all slots in the spUnsupervised object are
  #filled. This should actually be regulated by the class definition BUT you
  #should probably double check that it works as expected via unit tests.
  
  #check for same genes in singlets counts and multiplets counts

    if(getData(singlets, "norm.to") != getData(multiplets, "norm.to")) {
        stop("norm.to mismatch: singlets and multiplets are not normalized to the same total counts")
    }
    if(useMuSiC) {
        require("MuSiC")
        sng <- getData(singlets, "counts")
        mul <- getData(multiplets, "counts")
        phenoData <- AnnotatedDataFrame(data=data.frame(samples=substr(colnames(sng), 3, 8), plates=substr(colnames(sng), 3, 10), row.names = colnames(sng), celltype=getData(singlets, "classification")))
        sc.eset <- ExpressionSet(sng, phenoData=phenoData)

        
        bulk.eset <- ExpressionSet(mul)

        Est.prop <- music_prop(bulk.eset=bulk.eset, sc.eset=sc.eset, clusters='celltype', samples='samples')

        return(new(
            "CIMseqConnections",
            fractions = Est.prop$Est.prop.weighted,
            costs = Est.prop$r.squared.full,
            convergence = setNames(rep("MuSic", mul), colnames(mul)),
            stats = tibble(),
            swarmPos = matrix(),
            singletIdx = 1:length(colnames(mul)),
            arguments = tibble(
                maxiter = maxiter, swarmsize = swarmsize,
                nSyntheticMultiplets = nSyntheticMultiplets, seed = seed, norm = norm,
                report = report, reportRate = reportRate, features = list(selectInd),
                vectorize = vectorize, permute = permute
            )
        ))
    }
