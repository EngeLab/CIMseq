// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// normalizeFractionsEigen
Eigen::VectorXd normalizeFractionsEigen(const Eigen::VectorXd fractions);
RcppExport SEXP _sp_scRNAseq_normalizeFractionsEigen(SEXP fractionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type fractions(fractionsSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeFractionsEigen(fractions));
    return rcpp_result_gen;
END_RCPP
}
// sampleSingletsEigen
Eigen::VectorXi sampleSingletsEigen(CharacterVector classes);
RcppExport SEXP _sp_scRNAseq_sampleSingletsEigen(SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSingletsEigen(classes));
    return rcpp_result_gen;
END_RCPP
}
// subsetSingletsEigen
Eigen::MatrixXd subsetSingletsEigen(Eigen::MatrixXd singlets, Eigen::VectorXi idxToSubset);
RcppExport SEXP _sp_scRNAseq_subsetSingletsEigen(SEXP singletsSEXP, SEXP idxToSubsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type singlets(singletsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type idxToSubset(idxToSubsetSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetSingletsEigen(singlets, idxToSubset));
    return rcpp_result_gen;
END_RCPP
}
// adjustAccordingToFractionsEigen
Eigen::MatrixXd adjustAccordingToFractionsEigen(const Eigen::VectorXd fractions, const Eigen::MatrixXd subMat);
RcppExport SEXP _sp_scRNAseq_adjustAccordingToFractionsEigen(SEXP fractionsSEXP, SEXP subMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type fractions(fractionsSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type subMat(subMatSEXP);
    rcpp_result_gen = Rcpp::wrap(adjustAccordingToFractionsEigen(fractions, subMat));
    return rcpp_result_gen;
END_RCPP
}
// multipletSumsEigen
Eigen::VectorXd multipletSumsEigen(const Eigen::MatrixXd singlets);
RcppExport SEXP _sp_scRNAseq_multipletSumsEigen(SEXP singletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type singlets(singletsSEXP);
    rcpp_result_gen = Rcpp::wrap(multipletSumsEigen(singlets));
    return rcpp_result_gen;
END_RCPP
}
// poissonSampleEigen
Eigen::Map<Eigen::VectorXd> poissonSampleEigen(const Eigen::VectorXd rsRcpp);
RcppExport SEXP _sp_scRNAseq_poissonSampleEigen(SEXP rsRcppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type rsRcpp(rsRcppSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonSampleEigen(rsRcpp));
    return rcpp_result_gen;
END_RCPP
}
// cpmEigen
Eigen::MatrixXd cpmEigen(const Eigen::MatrixXd counts);
RcppExport SEXP _sp_scRNAseq_cpmEigen(SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpmEigen(counts));
    return rcpp_result_gen;
END_RCPP
}
// generateSyntheticMultipletsEigen
Eigen::MatrixXd generateSyntheticMultipletsEigen(Eigen::MatrixXd singlets, CharacterVector classes, Eigen::VectorXd fractions, int n);
RcppExport SEXP _sp_scRNAseq_generateSyntheticMultipletsEigen(SEXP singletsSEXP, SEXP classesSEXP, SEXP fractionsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type singlets(singletsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type fractions(fractionsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSyntheticMultipletsEigen(singlets, classes, fractions, n));
    return rcpp_result_gen;
END_RCPP
}
// calculateCostDensity
Eigen::MatrixXd calculateCostDensity(Eigen::Map<Eigen::VectorXd> oneMultiplet, const Eigen::MatrixXd syntheticMultiplets);
RcppExport SEXP _sp_scRNAseq_calculateCostDensity(SEXP oneMultipletSEXP, SEXP syntheticMultipletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type oneMultiplet(oneMultipletSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type syntheticMultiplets(syntheticMultipletsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCostDensity(oneMultiplet, syntheticMultiplets));
    return rcpp_result_gen;
END_RCPP
}
// calculateLogRowMeans
Eigen::VectorXd calculateLogRowMeans(const Eigen::MatrixXd densities);
RcppExport SEXP _sp_scRNAseq_calculateLogRowMeans(SEXP densitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type densities(densitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateLogRowMeans(densities));
    return rcpp_result_gen;
END_RCPP
}
// fixNegInf
Eigen::VectorXd fixNegInf(const Eigen::VectorXd means);
RcppExport SEXP _sp_scRNAseq_fixNegInf(SEXP meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type means(meansSEXP);
    rcpp_result_gen = Rcpp::wrap(fixNegInf(means));
    return rcpp_result_gen;
END_RCPP
}
// costNegSum
double costNegSum(Eigen::VectorXd means);
RcppExport SEXP _sp_scRNAseq_costNegSum(SEXP meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type means(meansSEXP);
    rcpp_result_gen = Rcpp::wrap(costNegSum(means));
    return rcpp_result_gen;
END_RCPP
}
// calculateCostEigen
double calculateCostEigen(const Eigen::Map<Eigen::VectorXd> oneMultiplet, const Eigen::MatrixXd syntheticMultiplets);
RcppExport SEXP _sp_scRNAseq_calculateCostEigen(SEXP oneMultipletSEXP, SEXP syntheticMultipletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type oneMultiplet(oneMultipletSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type syntheticMultiplets(syntheticMultipletsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCostEigen(oneMultiplet, syntheticMultiplets));
    return rcpp_result_gen;
END_RCPP
}
// calculateCostC
double calculateCostC(const Eigen::Map<Eigen::VectorXd> oneMultiplet, const Eigen::Map<Eigen::MatrixXd> singlets, const CharacterVector classes, const Eigen::VectorXd fractions, const int n);
RcppExport SEXP _sp_scRNAseq_calculateCostC(SEXP oneMultipletSEXP, SEXP singletsSEXP, SEXP classesSEXP, SEXP fractionsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type oneMultiplet(oneMultipletSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type singlets(singletsSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type fractions(fractionsSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCostC(oneMultiplet, singlets, classes, fractions, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sp_scRNAseq_normalizeFractionsEigen", (DL_FUNC) &_sp_scRNAseq_normalizeFractionsEigen, 1},
    {"_sp_scRNAseq_sampleSingletsEigen", (DL_FUNC) &_sp_scRNAseq_sampleSingletsEigen, 1},
    {"_sp_scRNAseq_subsetSingletsEigen", (DL_FUNC) &_sp_scRNAseq_subsetSingletsEigen, 2},
    {"_sp_scRNAseq_adjustAccordingToFractionsEigen", (DL_FUNC) &_sp_scRNAseq_adjustAccordingToFractionsEigen, 2},
    {"_sp_scRNAseq_multipletSumsEigen", (DL_FUNC) &_sp_scRNAseq_multipletSumsEigen, 1},
    {"_sp_scRNAseq_poissonSampleEigen", (DL_FUNC) &_sp_scRNAseq_poissonSampleEigen, 1},
    {"_sp_scRNAseq_cpmEigen", (DL_FUNC) &_sp_scRNAseq_cpmEigen, 1},
    {"_sp_scRNAseq_generateSyntheticMultipletsEigen", (DL_FUNC) &_sp_scRNAseq_generateSyntheticMultipletsEigen, 4},
    {"_sp_scRNAseq_calculateCostDensity", (DL_FUNC) &_sp_scRNAseq_calculateCostDensity, 2},
    {"_sp_scRNAseq_calculateLogRowMeans", (DL_FUNC) &_sp_scRNAseq_calculateLogRowMeans, 1},
    {"_sp_scRNAseq_fixNegInf", (DL_FUNC) &_sp_scRNAseq_fixNegInf, 1},
    {"_sp_scRNAseq_costNegSum", (DL_FUNC) &_sp_scRNAseq_costNegSum, 1},
    {"_sp_scRNAseq_calculateCostEigen", (DL_FUNC) &_sp_scRNAseq_calculateCostEigen, 2},
    {"_sp_scRNAseq_calculateCostC", (DL_FUNC) &_sp_scRNAseq_calculateCostC, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_sp_scRNAseq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
