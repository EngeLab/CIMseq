// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// sampleSinglets
IntegerVector sampleSinglets(CharacterVector classes);
RcppExport SEXP _sp_scRNAseq_sampleSinglets(SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSinglets(classes));
    return rcpp_result_gen;
END_RCPP
}
// subsetSingletsEigen
Eigen::Map<Eigen::MatrixXd> subsetSingletsEigen(const arma::mat& singlets, Rcpp::NumericVector idxToSubset);
RcppExport SEXP _sp_scRNAseq_subsetSingletsEigen(SEXP singletsSEXP, SEXP idxToSubsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type singlets(singletsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type idxToSubset(idxToSubsetSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetSingletsEigen(singlets, idxToSubset));
    return rcpp_result_gen;
END_RCPP
}
// adjustAccordingToFractionsEigen
SEXP adjustAccordingToFractionsEigen(Eigen::Map<Eigen::VectorXd> fractions, const Eigen::Map<Eigen::MatrixXd> singlets);
RcppExport SEXP _sp_scRNAseq_adjustAccordingToFractionsEigen(SEXP fractionsSEXP, SEXP singletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type fractions(fractionsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type singlets(singletsSEXP);
    rcpp_result_gen = Rcpp::wrap(adjustAccordingToFractionsEigen(fractions, singlets));
    return rcpp_result_gen;
END_RCPP
}
// multipletSumsEigen
SEXP multipletSumsEigen(Eigen::MatrixXd singlets);
RcppExport SEXP _sp_scRNAseq_multipletSumsEigen(SEXP singletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type singlets(singletsSEXP);
    rcpp_result_gen = Rcpp::wrap(multipletSumsEigen(singlets));
    return rcpp_result_gen;
END_RCPP
}
// poissonSample
NumericVector poissonSample(arma::mat rsRcpp);
RcppExport SEXP _sp_scRNAseq_poissonSample(SEXP rsRcppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type rsRcpp(rsRcppSEXP);
    rcpp_result_gen = Rcpp::wrap(poissonSample(rsRcpp));
    return rcpp_result_gen;
END_RCPP
}
// cpmC
SEXP cpmC(const Eigen::Map<Eigen::MatrixXd> counts);
RcppExport SEXP _sp_scRNAseq_cpmC(SEXP countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type counts(countsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpmC(counts));
    return rcpp_result_gen;
END_RCPP
}
// generateSyntheticMultipletsEigen
NumericMatrix generateSyntheticMultipletsEigen(const arma::mat& singlets, CharacterVector classes, Eigen::Map<Eigen::VectorXd> fractions, int n);
RcppExport SEXP _sp_scRNAseq_generateSyntheticMultipletsEigen(SEXP singletsSEXP, SEXP classesSEXP, SEXP fractionsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type singlets(singletsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type fractions(fractionsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSyntheticMultipletsEigen(singlets, classes, fractions, n));
    return rcpp_result_gen;
END_RCPP
}
// calculateCostDensity
SEXP calculateCostDensity(Eigen::Map<Eigen::VectorXi> oneMultiplet, const Eigen::Map<Eigen::MatrixXd> syntheticMultiplets);
RcppExport SEXP _sp_scRNAseq_calculateCostDensity(SEXP oneMultipletSEXP, SEXP syntheticMultipletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type oneMultiplet(oneMultipletSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type syntheticMultiplets(syntheticMultipletsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCostDensity(oneMultiplet, syntheticMultiplets));
    return rcpp_result_gen;
END_RCPP
}
// calculateLogRowMeans
SEXP calculateLogRowMeans(const Eigen::Map<Eigen::MatrixXd> densities);
RcppExport SEXP _sp_scRNAseq_calculateLogRowMeans(SEXP densitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type densities(densitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateLogRowMeans(densities));
    return rcpp_result_gen;
END_RCPP
}
// fixNegInf
SEXP fixNegInf(Eigen::VectorXd means);
RcppExport SEXP _sp_scRNAseq_fixNegInf(SEXP meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type means(meansSEXP);
    rcpp_result_gen = Rcpp::wrap(fixNegInf(means));
    return rcpp_result_gen;
END_RCPP
}
// costNegSum
SEXP costNegSum(Eigen::VectorXd means);
RcppExport SEXP _sp_scRNAseq_costNegSum(SEXP meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type means(meansSEXP);
    rcpp_result_gen = Rcpp::wrap(costNegSum(means));
    return rcpp_result_gen;
END_RCPP
}
// calculateCostEigen
SEXP calculateCostEigen(Eigen::Map<Eigen::VectorXi> oneMultiplet, const Eigen::Map<Eigen::MatrixXd> syntheticMultiplets);
RcppExport SEXP _sp_scRNAseq_calculateCostEigen(SEXP oneMultipletSEXP, SEXP syntheticMultipletsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type oneMultiplet(oneMultipletSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type syntheticMultiplets(syntheticMultipletsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCostEigen(oneMultiplet, syntheticMultiplets));
    return rcpp_result_gen;
END_RCPP
}
// calculateCostC
double calculateCostC(Eigen::Map<Eigen::VectorXd> oneMultiplet, const arma::mat& singlets, CharacterVector classes, Eigen::Map<Eigen::VectorXd> fractions, int n);
RcppExport SEXP _sp_scRNAseq_calculateCostC(SEXP oneMultipletSEXP, SEXP singletsSEXP, SEXP classesSEXP, SEXP fractionsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type oneMultiplet(oneMultipletSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type singlets(singletsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type fractions(fractionsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCostC(oneMultiplet, singlets, classes, fractions, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sp_scRNAseq_sampleSinglets", (DL_FUNC) &_sp_scRNAseq_sampleSinglets, 1},
    {"_sp_scRNAseq_subsetSingletsEigen", (DL_FUNC) &_sp_scRNAseq_subsetSingletsEigen, 2},
    {"_sp_scRNAseq_adjustAccordingToFractionsEigen", (DL_FUNC) &_sp_scRNAseq_adjustAccordingToFractionsEigen, 2},
    {"_sp_scRNAseq_multipletSumsEigen", (DL_FUNC) &_sp_scRNAseq_multipletSumsEigen, 1},
    {"_sp_scRNAseq_poissonSample", (DL_FUNC) &_sp_scRNAseq_poissonSample, 1},
    {"_sp_scRNAseq_cpmC", (DL_FUNC) &_sp_scRNAseq_cpmC, 1},
    {"_sp_scRNAseq_generateSyntheticMultipletsEigen", (DL_FUNC) &_sp_scRNAseq_generateSyntheticMultipletsEigen, 4},
    {"_sp_scRNAseq_calculateCostDensity", (DL_FUNC) &_sp_scRNAseq_calculateCostDensity, 2},
    {"_sp_scRNAseq_calculateLogRowMeans", (DL_FUNC) &_sp_scRNAseq_calculateLogRowMeans, 1},
    {"_sp_scRNAseq_fixNegInf", (DL_FUNC) &_sp_scRNAseq_fixNegInf, 1},
    {"_sp_scRNAseq_costNegSum", (DL_FUNC) &_sp_scRNAseq_costNegSum, 1},
    {"_sp_scRNAseq_calculateCostEigen", (DL_FUNC) &_sp_scRNAseq_calculateCostEigen, 2},
    {"_sp_scRNAseq_calculateCostC", (DL_FUNC) &_sp_scRNAseq_calculateCostC, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_sp_scRNAseq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
